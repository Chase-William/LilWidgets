<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LilWidgets</name>
    </assembly>
    <members>
        <member name="F:LilWidgets.Widgets.LoadingWidget.BASE_SHADOW_SIGMA">
            <summary>
            The base sigma for the drop shadow used with the backing arc.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.SWEEP_START">
            <summary>
            The starting position of the arcs.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.ALLOWED_DEVIATION">
            <summary>
            The allowed deviation for the progress animation.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.DEFAULT_ANIMATION_DURATION">
            <summary>
            The default value for the duration of the progress animation.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.DEFAULT_FRAME_RATE">
            <summary>
            The default frame-rate being targeted.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.DEFAULT_STROKE_WIDTH">
            <summary>
            The default stroke width used for the arcs.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.cycleTime">
            <summary>
            The default cycle time to be aimed for.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.defaultShadowColor">
            <summary>
            The default shadow color used with the arcs.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.BackArcColorProperty">
            <summary>
            <see cref="T:Xamarin.Forms.BindableProperty"/> for the <see cref="F:LilWidgets.Widgets.LoadingWidget.BackArcColorProperty"/> property.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.DurationProperty">
            <summary>
            <see cref="T:Xamarin.Forms.BindableProperty"/> for the <see cref="P:LilWidgets.Widgets.LoadingWidget.Duration"/> property.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.StrokeWidthProperty">
            <summary>
            <see cref="T:Xamarin.Forms.BindableProperty"/> for the <see cref="P:LilWidgets.Widgets.LoadingWidget.StrokeWidth"/> property.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.ShadowColorProperty">
            <summary>
            <see cref="T:Xamarin.Forms.BindableProperty"/> for the <see cref="P:LilWidgets.Widgets.LoadingWidget.ShadowColor"/> property.
            </summary>
        </member>
        <member name="P:LilWidgets.Widgets.LoadingWidget.BackArcColor">
            <summary>
            The color of the backing arc to the progress arc.
            </summary>
        </member>
        <member name="P:LilWidgets.Widgets.LoadingWidget.ShadowColor">
            <summary>
            The color of the shadow to be used with the arcs.
            </summary>
        </member>
        <member name="P:LilWidgets.Widgets.LoadingWidget.Duration">
            <summary>
            The time in milliseconds it takes for 1 complete cycle of the animation.
            </summary>
        </member>
        <member name="P:LilWidgets.Widgets.LoadingWidget.StrokeWidth">
            <summary>
            The target stroke width value to be used for all arcs that make up the widget.
            </summary>
        </member>
        <member name="P:LilWidgets.Widgets.LoadingWidget.Animating">
            <summary>
            Indicates whether the progress widget is animating right now.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.backgroundPaint">
            <summary>
            Used to draw the background arc.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.isStrokeRatioDirty">
            <summary>
            Indicates whether the <see cref="F:LilWidgets.Widgets.LoadingWidget.strokeRatio"/> needs to be re-calculated.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.millisecondDuration">
            <summary>
            The target duration of the progress animation in milliseconds.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.midX">
            <summary>
            The mid-x value of the <see cref="F:LilWidgets.Widgets.LoadingWidget.canvas"/>. Updates come from the <see cref="M:LilWidgets.Widgets.LoadingWidget.canvas_PaintSurface(System.Object,SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)"/> method.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.midY">
            <summary>
            The mid-y value of the <see cref="F:LilWidgets.Widgets.LoadingWidget.canvas"/>. Updates come from the <see cref="M:LilWidgets.Widgets.LoadingWidget.canvas_PaintSurface(System.Object,SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)"/> method.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.stopwatch">
            <summary>
            Used in conjunction with the <see cref="M:Xamarin.Forms.Device.StartTimer(System.TimeSpan,System.Func{System.Boolean})"/>'s lambda inside the <see cref="!:PercentValuePropertyChanged(BindableObject, object, object)"/>
            to determine the amount of time passed from the last time being restarted. This is used as deltaTime to help smooth out animations and pull away from using frame-rate as a method of
            determining how much a target value should change over a given amount of time.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.halfOfRelativeStrokeWidth">
            <summary>
            The last determined value of <see cref="P:LilWidgets.Widgets.LoadingWidget.StrokeWidth"/> * <see cref="F:LilWidgets.Widgets.LoadingWidget.strokeRatio"/> / 2.
            Updates come from the <see cref="M:LilWidgets.Widgets.LoadingWidget.canvas_PaintSurface(System.Object,SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)"/> method.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.arcRect">
            <summary>
            The bounds or frame of both arcs and is a factor when determining the text's size.
            Updates come from the <see cref="M:LilWidgets.Widgets.LoadingWidget.canvas_PaintSurface(System.Object,SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)"/> method.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.info">
            <summary>
            The information about the <see cref="F:LilWidgets.Widgets.LoadingWidget.canvas"/> from the last use of <see cref="M:LilWidgets.Widgets.LoadingWidget.canvas_PaintSurface(System.Object,SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)"/>.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.relativeStrokeWidth">
            <summary>
            The last determined value of the product of <see cref="P:LilWidgets.Widgets.LoadingWidget.StrokeWidth"/> * <see cref="F:LilWidgets.Widgets.LoadingWidget.strokeRatio"/>.
            This is used for resizing. Updates come from the <see cref="M:LilWidgets.Widgets.LoadingWidget.canvas_PaintSurface(System.Object,SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)"/> method.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.strokeRatio">
            <summary>
            The ratio of the canvas size and <see cref="P:LilWidgets.Widgets.LoadingWidget.StrokeWidth"/> to be used when resizing. 
            This value only updates when the <see cref="P:LilWidgets.Widgets.LoadingWidget.StrokeWidth"/> is changed.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.isWidthGreaterThanHeight">
            <summary>
            Indicates whether the width of the <see cref="F:LilWidgets.Widgets.LoadingWidget.canvas"/> is greater than the height.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.limitingSpan">
            <summary>
            The smallest span of the <see cref="F:LilWidgets.Widgets.LoadingWidget.canvas"/>. This can either be the span from the top to the bottom aka the height
            or the left to the right aka the width.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.relativeShadowSigma">
            <summary>
            The shadow sigma used for the drop shadow which is relative to the <see cref="F:LilWidgets.Widgets.LoadingWidget.strokeRatio"/>. This helps the shadow resize correctly. Without this the
            shadow can be come obnoxious when scaling from a larger size to a smaller one.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.shadowColor">
            <summary>
            The color used for the drop shadow.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.halfShadowStrokeWidth">
            <summary>
            The width of half the stroke of the shadow arc. This is used as a padding when determining <see cref="F:LilWidgets.Widgets.LoadingWidget.arcRect"/> because the shadow is the widest
            arc compared to the others.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.backgroundPath">
            <summary>
            The path used to define the background arc.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.sweepPercentage">
            <summary>
            The current sweep position in the animation.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.LoadingWidget.debugWatch">
            <summary>
            Used for debugging.
            </summary>
        </member>
        <member name="M:LilWidgets.Widgets.LoadingWidget.#ctor">
            <summary>
            Primary Constructor.
            </summary>
        </member>
        <member name="M:LilWidgets.Widgets.LoadingWidget.canvas_PaintSurface(System.Object,SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)">
            <summary>
            Applies the desired graphics to the <see cref="F:LilWidgets.Widgets.LoadingWidget.canvas"/>.
            </summary>
        </member>
        <member name="M:LilWidgets.Widgets.LoadingWidget.UpdateStrokeRatio">
            <summary>
            Calculates a new ratio for the <see cref="F:LilWidgets.Widgets.LoadingWidget.strokeRatio"/> based off the target <see cref="P:LilWidgets.Widgets.LoadingWidget.StrokeWidth"/> and the current <see cref="F:LilWidgets.Widgets.LoadingWidget.limitingSpan"/>.
            </summary>
        </member>
        <member name="M:LilWidgets.Widgets.LoadingWidget.TryUpdate(LilWidgets.Widgets.LoadingWidget)">
            <summary>
            Invalidates the <see cref="F:LilWidgets.Widgets.LoadingWidget.canvas"/> of the given instance only if the animating is not running. Otherwise invalidating is not needed
            because the animation will apply the changes next cycle.
            </summary>
            <param name="widget"></param>
        </member>
        <member name="T:LilWidgets.Widgets.ProgressWidget">
            <summary>
            The Progress Widget is designed to show a percentage of a goal or objective. 
            This can be anything from a quiz score where the user attained a 90%, or even a loading bar where the loading process’s progress can be given.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.BASE_SHADOW_SIGMA">
            <summary>
            The base sigma for the drop shadow used with the backing arc.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.SWEEP_START">
            <summary>
            The starting position of the arcs.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.ALLOWED_DEVIATION">
            <summary>
            The allowed deviation for the progress animation.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.DEFAULT_ANIMATION_DURATION">
            <summary>
            The default value for the duration of the progress animation.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.DEFAULT_FRAME_RATE">
            <summary>
            The default frame-rate being targeted.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.DEFAULT_STROKE_WIDTH">
            <summary>
            The default stroke width used for the arcs.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.DEFAULT_ARC_TO_TEXT_SPACING">
            <summary>
            The default spacing between the arc's inner lining and the text rectangle.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.cycleTime">
            <summary>
            The default cycle time to be aimed for.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.defaultShadowColor">
            <summary>
            The default shadow color used with the arcs.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.defaultTextColor">
            <summary>
            The default text color used.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.PercentProgressValueProperty">
            <summary>
            <see cref="T:Xamarin.Forms.BindableProperty"/> for the <see cref="P:LilWidgets.Widgets.ProgressWidget.PercentProgressValue"/> property.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.BackArcColorProperty">
            <summary>
            <see cref="T:Xamarin.Forms.BindableProperty"/> for the <see cref="F:LilWidgets.Widgets.ProgressWidget.BackArcColorProperty"/> property.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.ProgressArcColorProperty">
            <summary>
            <see cref="T:Xamarin.Forms.BindableProperty"/> for the <see cref="P:LilWidgets.Widgets.ProgressWidget.ProgressArcColor"/> property.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.IsTextVisibleProperty">
            <summary>
            <see cref="T:Xamarin.Forms.BindableProperty"/> for the <see cref="P:LilWidgets.Widgets.ProgressWidget.IsTextVisible"/> property.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.DurationProperty">
            <summary>
            <see cref="T:Xamarin.Forms.BindableProperty"/> for the <see cref="P:LilWidgets.Widgets.ProgressWidget.Duration"/> property.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.StrokeWidthProperty">
            <summary>
            <see cref="T:Xamarin.Forms.BindableProperty"/> for the <see cref="P:LilWidgets.Widgets.ProgressWidget.StrokeWidth"/> property.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.TextMarginProperty">
            <summary>
            <see cref="T:Xamarin.Forms.BindableProperty"/> for the <see cref="P:LilWidgets.Widgets.ProgressWidget.TextMargin"/> property.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.ShadowColorProperty">
            <summary>
            <see cref="T:Xamarin.Forms.BindableProperty"/> for the <see cref="P:LilWidgets.Widgets.ProgressWidget.ShadowColor"/> property.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.TextColorProperty">
            <summary>
            <see cref="T:Xamarin.Forms.BindableProperty"/> for the <see cref="P:LilWidgets.Widgets.ProgressWidget.TextColor"/> property.
            </summary>
        </member>
        <member name="P:LilWidgets.Widgets.ProgressWidget.PercentProgressValue">
            <summary>
            The progress to be displayed. This value should be a percentage value (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:LilWidgets.Widgets.ProgressWidget.BackArcColor">
            <summary>
            The color of the backing arc to the progress arc.
            </summary>
        </member>
        <member name="P:LilWidgets.Widgets.ProgressWidget.ProgressArcColor">
            <summary>
            The color of the progress arc to be used.
            </summary>
        </member>
        <member name="P:LilWidgets.Widgets.ProgressWidget.ShadowColor">
            <summary>
            The color of the shadow to be used with the arcs.
            </summary>
        </member>
        <member name="P:LilWidgets.Widgets.ProgressWidget.IsTextVisible">
            <summary>
            Controls whether the percentage text is visible to the user.
            </summary>
        </member>
        <member name="P:LilWidgets.Widgets.ProgressWidget.Duration">
            <summary>
            Is the time required to go from a <see cref="P:LilWidgets.Widgets.ProgressWidget.PercentProgressValue"/> of 0.0 to a <see cref="P:LilWidgets.Widgets.ProgressWidget.PercentProgressValue"/> of 1.0. 
            Therefore if <see cref="P:LilWidgets.Widgets.ProgressWidget.PercentProgressValue"/> is changing from 0.0 to 0.5 and the <see cref="P:LilWidgets.Widgets.ProgressWidget.Duration"/> is set to 2000 milliseconds; it will take
            one second to complete the animation. The equation looks like this (relativeDuration == milliseconds * difference).
            </summary>
        </member>
        <member name="P:LilWidgets.Widgets.ProgressWidget.StrokeWidth">
            <summary>
            The target stroke width value to be used for all arcs that make up the widget.
            </summary>
        </member>
        <member name="P:LilWidgets.Widgets.ProgressWidget.TextColor">
            <summary>
            The color the text will use.
            </summary>
        </member>
        <member name="P:LilWidgets.Widgets.ProgressWidget.TextMargin">
            <summary>
            The target spacing / margin between the inner side of the arc and the edges of the text's rectangle. The size of the margin can only be a single value at the moment that is used
            for both the left and right hand sides. The text will always be centered both vertically and horizontally.
            </summary>
        </member>
        <member name="P:LilWidgets.Widgets.ProgressWidget.Animating">
            <summary>
            Indicates whether the progress widget is animating right now.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.progressPaint">
            <summary>
            Used to draw the progress arc.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.backgroundPaint">
            <summary>
            Used to draw the background arc.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.textPaint">
            <summary>
            Used to draw percentage text.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.isStrokeRatioDirty">
            <summary>
            Indicates whether the <see cref="F:LilWidgets.Widgets.ProgressWidget.strokeRatio"/> needs to be re-calculated.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.isArcToTextRatioDirty">
            <summary>
            Indicates whether the <see cref="F:LilWidgets.Widgets.ProgressWidget.txtSpaceRatio"/> needs to be re-calculated.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.comparer">
            <summary>
            Used to determine when the animation should stop
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.millisecondDuration">
            <summary>
            The target duration of the progress animation in milliseconds.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.difference">
            <summary>
            The difference from newly set <see cref="P:LilWidgets.Widgets.ProgressWidget.PercentProgressValue"/> and the old. Used specifically within progress animation.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.textWidth">
            <summary>
            The result of <see cref="M:SkiaSharp.SKPaint.MeasureText(System.String,SkiaSharp.SKRect@)"/>.
            Updates come from the <see cref="M:LilWidgets.Widgets.ProgressWidget.canvas_PaintSurface(System.Object,SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)"/> method.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.currentPercentageValue">
            <summary>
            The animation's current progress towards the <see cref="P:LilWidgets.Widgets.ProgressWidget.PercentProgressValue"/>.
            Updates come the <see cref="M:Xamarin.Forms.Device.StartTimer(System.TimeSpan,System.Func{System.Boolean})"/> when <see cref="M:LilWidgets.Widgets.ProgressWidget.PercentValuePropertyChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)"/> is invoked.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.midX">
            <summary>
            The mid-x value of the <see cref="F:LilWidgets.Widgets.ProgressWidget.canvas"/>. Updates come from the <see cref="M:LilWidgets.Widgets.ProgressWidget.canvas_PaintSurface(System.Object,SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)"/> method.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.midY">
            <summary>
            The mid-y value of the <see cref="F:LilWidgets.Widgets.ProgressWidget.canvas"/>. Updates come from the <see cref="M:LilWidgets.Widgets.ProgressWidget.canvas_PaintSurface(System.Object,SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)"/> method.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.stopwatch">
            <summary>
            Used in conjunction with the <see cref="M:Xamarin.Forms.Device.StartTimer(System.TimeSpan,System.Func{System.Boolean})"/>'s lambda inside the <see cref="M:LilWidgets.Widgets.ProgressWidget.PercentValuePropertyChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)"/>
            to determine the amount of time passed from the last time being restarted. This is used as deltaTime to help smooth out animations and pull away from using frame-rate as a method of
            determining how much a target value should change over a given amount of time.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.halfOfRelativeStrokeWidth">
            <summary>
            The last determined value of <see cref="P:LilWidgets.Widgets.ProgressWidget.StrokeWidth"/> * <see cref="F:LilWidgets.Widgets.ProgressWidget.strokeRatio"/> / 2.
            Updates come from the <see cref="M:LilWidgets.Widgets.ProgressWidget.canvas_PaintSurface(System.Object,SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)"/> method.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.arcRect">
            <summary>
            The bounds or frame of both arcs and is a factor when determining the text's size.
            Updates come from the <see cref="M:LilWidgets.Widgets.ProgressWidget.canvas_PaintSurface(System.Object,SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)"/> method.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.info">
            <summary>
            The information about the <see cref="F:LilWidgets.Widgets.ProgressWidget.canvas"/> from the last use of <see cref="M:LilWidgets.Widgets.ProgressWidget.canvas_PaintSurface(System.Object,SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)"/>.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.relativeStrokeWidth">
            <summary>
            The last determined value of the product of <see cref="P:LilWidgets.Widgets.ProgressWidget.StrokeWidth"/> * <see cref="F:LilWidgets.Widgets.ProgressWidget.strokeRatio"/>.
            This is used for resizing. Updates come from the <see cref="M:LilWidgets.Widgets.ProgressWidget.canvas_PaintSurface(System.Object,SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)"/> method.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.percentageMsg">
            <summary>
            The last percentage message displayed to the user if <see cref="P:LilWidgets.Widgets.ProgressWidget.IsTextVisible"/> is true.
            Updates come from the <see cref="M:LilWidgets.Widgets.ProgressWidget.canvas_PaintSurface(System.Object,SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)"/> method.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.strokeRatio">
            <summary>
            The ratio of the canvas size and <see cref="P:LilWidgets.Widgets.ProgressWidget.StrokeWidth"/> to be used when resizing. 
            This value only updates when the <see cref="P:LilWidgets.Widgets.ProgressWidget.StrokeWidth"/> is changed.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.txtSpaceRatio">
            <summary>
            The ratio of the canvas size and the <see cref="P:LilWidgets.Widgets.ProgressWidget.TextMargin"/> to be used when resizing.
            This value only updates when the <see cref="P:LilWidgets.Widgets.ProgressWidget.TextMargin"/> is changed.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.isWidthGreaterThanHeight">
            <summary>
            Indicates whether the width of the <see cref="F:LilWidgets.Widgets.ProgressWidget.canvas"/> is greater than the height.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.limitingSpan">
            <summary>
            The smallest span of the <see cref="F:LilWidgets.Widgets.ProgressWidget.canvas"/>. This can either be the span from the top to the bottom aka the height
            or the left to the right aka the width.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.relativeShadowSigma">
            <summary>
            The shadow sigma used for the drop shadow which is relative to the <see cref="F:LilWidgets.Widgets.ProgressWidget.strokeRatio"/>. This helps the shadow resize correctly. Without this the
            shadow can be come obnoxious when scaling from a larger size to a smaller one.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.shadowColor">
            <summary>
            The color used for the drop shadow.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.halfShadowStrokeWidth">
            <summary>
            The width of half the stroke of the shadow arc. This is used as a padding when determining <see cref="F:LilWidgets.Widgets.ProgressWidget.arcRect"/> because the shadow is the widest
            arc compared to the others.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.textBounds">
            <summary>
            The bounds or frame of the text being displayed in the center of view.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.progressPath">
            <summary>
            The path used to define the progress arc.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.backgroundPath">
            <summary>
            The path used to define the background arc.
            </summary>
        </member>
        <member name="F:LilWidgets.Widgets.ProgressWidget.debugWatch">
            <summary>
            Used for debugging.
            </summary>
        </member>
        <member name="M:LilWidgets.Widgets.ProgressWidget.#ctor">
            <summary>
            Primary Constructor.
            </summary>
        </member>
        <member name="M:LilWidgets.Widgets.ProgressWidget.canvas_PaintSurface(System.Object,SkiaSharp.Views.Forms.SKPaintSurfaceEventArgs)">
            <summary>
            Applies the desired graphics to the <see cref="F:LilWidgets.Widgets.ProgressWidget.canvas"/>.
            </summary>
        </member>
        <member name="M:LilWidgets.Widgets.ProgressWidget.PercentageToSweepAngle(System.Double)">
            <summary>
            Converts a percentage value (1.0 to 0.0) to a sweep angle (0 to 360).
            </summary>
            <param name="percentage">Percentage to convert from.</param>
            <returns>Sweep angle.</returns>
        </member>
        <member name="M:LilWidgets.Widgets.ProgressWidget.ValidatePercentage(Xamarin.Forms.BindableObject,System.Object)">
            <summary>
            Validates the given value of the <see cref="P:LilWidgets.Widgets.ProgressWidget.PercentProgressValue"/> property.
            </summary>
            <param name="bindable">Instance of declaring type.</param>
            <param name="value">Value of <see cref="P:LilWidgets.Widgets.ProgressWidget.PercentProgressValue"/></param>
            <returns>Indication if successful validation.</returns>
        </member>
        <member name="M:LilWidgets.Widgets.ProgressWidget.PercentValuePropertyChanged(Xamarin.Forms.BindableObject,System.Object,System.Object)">
            <summary>
            A callback function to the <see cref="P:LilWidgets.Widgets.ProgressWidget.PercentProgressValue"/> being changed. IMPORTANT: No variables that are used directly inside the <see cref="M:Xamarin.Forms.Device.StartTimer(System.TimeSpan,System.Func{System.Boolean})"/>'s lambda can be instantiated here.
            This is because the closure that is generated by the lambda must capture references to variables that can be modified from the owning class instance. This means the class can modify the closure's 
            reference variables and therefore alter its behavior which is required.
            </summary>
            <param name="bindable">Declaring type.</param>tiger
            <param name="oldValue">Old value.</param>
            <param name="newValue">Newly assigned value.</param>
        </member>
        <member name="M:LilWidgets.Widgets.ProgressWidget.UpdateStrokeRatio">
            <summary>
            Calculates a new ratio for the <see cref="F:LilWidgets.Widgets.ProgressWidget.strokeRatio"/> based off the target <see cref="P:LilWidgets.Widgets.ProgressWidget.StrokeWidth"/> and the current <see cref="F:LilWidgets.Widgets.ProgressWidget.limitingSpan"/>.
            </summary>
        </member>
        <member name="M:LilWidgets.Widgets.ProgressWidget.UpdateArcToTextSpacingRatio">
            <summary>
            Calculates a new ratio for the <see cref="F:LilWidgets.Widgets.ProgressWidget.txtSpaceRatio"/> based off the target <see cref="P:LilWidgets.Widgets.ProgressWidget.TextMargin"/> and the current <see cref="F:LilWidgets.Widgets.ProgressWidget.arcRect"/>.
            </summary>
        </member>
        <member name="M:LilWidgets.Widgets.ProgressWidget.TryUpdate(LilWidgets.Widgets.ProgressWidget)">
            <summary>
            Invalidates the <see cref="F:LilWidgets.Widgets.ProgressWidget.canvas"/> of the given instance only if the animating is not running. Otherwise invalidating is not needed
            because the animation will apply the changes next cycle.
            </summary>
            <param name="widget"></param>
        </member>
    </members>
</doc>
